// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Feedback {
    id          Int                 @id @default(autoincrement())
    title       String
    category    String
    upvoteCount Int                 @default(0)
    status      String              @default("suggestion")
    description String
    comments    Comment[]
    upvotes     FeedbackUpvote[]    @relation("VotedFeedback")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String              @id @default(cuid())
  name              String?
  email             String?             @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  username          String?             @unique
  comments          Comment[]           @relation("UserComments")
  replies           Comment[]           @relation("UserReplies")
  feedbackUpvotes   FeedbackUpvote[]    @relation("FeedbackVoteBy")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Comment {
    id           Int         @id @default(autoincrement())
    content      String      @db.VarChar(256)
    replyingToId String?
    replyingTo   User?       @relation("UserReplies", fields: [replyingToId], references: [id])
    commentId    Int?
    comment      Comment?    @relation("CommentReplies", fields: [commentId], references: [id])
    replies      Comment[]   @relation("CommentReplies")
    feedbackId   Int
    feedback     Feedback    @relation(fields: [feedbackId], references: [id])
    userId       String
    user         User        @relation("UserComments", fields: [userId], references: [id])
}

model FeedbackUpvote {
    id              Int         @id @default(autoincrement())
    userId          String
    voteBy          User        @relation("FeedbackVoteBy", fields: [userId], references: [id])
    feedbackId      Int?
    feedback        Feedback?   @relation("VotedFeedback", fields: [feedbackId], references: [id])

    @@unique([userId, feedbackId])
}
